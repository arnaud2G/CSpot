//
//  SignInViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.10
//
//

import UIKit
import AWSMobileHubHelper
import AWSDynamoDB

class SignInViewController: UIViewController {
    @IBOutlet weak var anchorView: UIView!

// Support code for Facebook provider UI.
    @IBOutlet weak var facebookButton: UIButton!

    @IBOutlet weak var btnBack: UIButton!
    @IBOutlet weak var customProviderButton: UIButton!
    @IBOutlet weak var customCreateAccountButton: UIButton!
    @IBOutlet weak var customForgotPasswordButton: UIButton!
    @IBOutlet weak var customUserIdField: UITextField!
    @IBOutlet weak var customPasswordField: UITextField!
    @IBOutlet weak var leftHorizontalBar: UIView!
    @IBOutlet weak var rightHorizontalBar: UIView!
    @IBOutlet weak var orSignInWithLabel: UIView!
    
    var passwordAuthenticationCompletion: AWSTaskCompletionSource<AnyObject>?
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("Sign In Loading.")
        
        btnBack.setImage(#imageLiteral(resourceName: "delete").withRenderingMode(.alwaysTemplate), for: .normal)
        btnBack.tintColor = UIColor().primary()
        
        customProviderButton.unselectedStyle()
        customProviderButton.setImage(#imageLiteral(resourceName: "pirate").withRenderingMode(.alwaysTemplate), for: .normal)
        customProviderButton.layer.cornerRadius = customProviderButton.frame.size.height/2
        
        customCreateAccountButton.setTitleColor(UIColor().primary(), for: .normal)
        customForgotPasswordButton.setTitleColor(UIColor().primary(), for: .normal)
        
        // Facebook UI Setup
        facebookButton.addTarget(self, action: #selector(SignInViewController.handleFacebookLogin), for: .touchUpInside)
        let facebookButtonImage: UIImage? = UIImage(named: "FacebookButton")
        if let facebookButtonImage = facebookButtonImage{
            facebookButton.setImage(facebookButtonImage, for: UIControlState())
        } else {
            print("Facebook button image unavailable. We're hiding this button.")
            facebookButton.isHidden = true
        }
        view.addConstraint(NSLayoutConstraint(item: facebookButton, attribute: .top, relatedBy: .equal, toItem: anchorViewForFacebook(), attribute: .bottom, multiplier: 1, constant: 8.0))
        
        // Custom UI Setup
        customProviderButton.addTarget(self, action: #selector(self.handleCustomSignIn), for: .touchUpInside)
        customCreateAccountButton.addTarget(self, action: #selector(self.handleUserPoolSignUp), for: .touchUpInside)
        customForgotPasswordButton.addTarget(self, action: #selector(self.handleUserPoolForgotPassword), for: .touchUpInside)
    }
    
    @IBAction func btnBackPressed(_ sender: Any) {
        dimissController()
    }
    func dimissController() {
        self.dismiss(animated: true, completion: nil)
    }
    
    // MARK: - Utility Methods
    var popWait:WaitingViewController?
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        popWait = WaitingViewController()
        self.navigationController?.pushViewController(popWait!, animated: true)
        AWSIdentityManager.default().login(signInProvider: signInProvider, completionHandler: {(result: Any?, error: Error?) in
            self.popWait!.circleDismiss()
        })
    }
    
    // MARK: - IBActions
    func handleFacebookLogin() {
        // Modifier les permission FB ici
        //AWSFacebookSignInProvider.sharedInstance().setPermissions(["public_profile"])
        handleLoginWithSignInProvider(AWSFacebookSignInProvider.sharedInstance())
    }
    
    func anchorViewForFacebook() -> UIView {
        return orSignInWithLabel
    }

    func showErrorDialog(_ loginProviderName: String, withError error: NSError) {
         print("\(loginProviderName) failed to sign in w/ error: \(error)")
        let alertController = UIAlertController(title: NSLocalizedString("Sign-in Provider Sign-In Error", comment: "Sign-in error for sign-in failure."), message: NSLocalizedString("\(loginProviderName) failed to sign in w/ error: \(error)", comment: "Sign-in message structure for sign-in failure."), preferredStyle: .alert)
        let doneAction = UIAlertAction(title: NSLocalizedString("Cancel", comment: "Label to cancel sign-in failure."), style: .cancel, handler: nil)
        alertController.addAction(doneAction)
        present(alertController, animated: true, completion: nil)
    }
}


